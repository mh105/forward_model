-------------------------------
Duke 128 Forward Model data set
-------------------------------

Last update: Alex He 02/10/2020


DESCRIPTION
This is a BEM forward model built from EEG data collected from a member of Purdon lab group in July 2019. ANT mylab EEG system was used with the ANT Duke Waveguard equidistant 128-channel electrode. Reference electrode was online common average reference. Electrode positions were acquired using FASTSCAN II IR scanner and manually labelled for sensor coordinates in the FASTSCAN software by research assistant in the lab. T1 structural MRI data were collected at Ahinoula A. Martinos Center for Biomedical Imaging in Bay 3 using a Siemens 3-T scanner. MEMPRAGE sequence was used to acquire the T1 image volume, and FLASH sequence with 5-degree flip angle was used to acquire the FLASH image volume. Specific sequence information can be distributed upon request.

DATASET FILES

 --- 3shell_hbfBEM-fwd.mat
 --- 4shell_hbfBEM-fwd.mat

These two MATLAB files contain the BEM forward model built using Matti Stenroos' Helsinki BEM Framwork (HBF) solver with LCISA (linear collocation with isolated source approach). Stenroos, M., Nummenmaa, A., 2016. Incorporating and compensating cerebrospinal fluid in surface-based forward models of magneto- and electroencephalography. PLoS ONE 11(7):e0159595, 2016.

Workspace variables are as following: 

[sources] = a cell array containing the source locations as struct variables, with position 1 being left hemisphere and position 2 being right hemisphere. 
	Sources were generated under ICO5 resolution using the MNE-python package to decimate the lh.white and rh.white surfaces generated by FREESURFER recon pipeline. Note that a particular configuration of the recon pipeline was called indirectly through the simNIBS mri2mesh pipeline, which involves first transforming and replacing the T1 volume before calling recon with additional flags: -3T -cubic -cm 

-3T: 
	USING IMAGES FROM A 3T SCANNER 

	The -3T flag enables two specific options in recon-all for images acquired with
	a 3T scanner:  3T-specific NU intensity correction parameters are used in the 
	Non-Uniform normalization stage, and the Schwartz 3T atlas is used for 
	Talairach alignment.

-cubic: 
	no documentation available from FREESURFER, but recon-all bash script suggests referring to interpolation algorithm when mri_convert does conform step

-cm: 
	conform COR volumes to the min voxel size (https://surfer.nmr.mgh.harvard.edu/fswiki/recon-all Expert preferences) 

[bmeshes] = a cell array containing the BEM surfaces in an inward-to-outward order. For 3shell_hbfBEM-fwd.mat, the BEM surfaces are: inner_skull, outer_skull, and skin. For 4shell_hbfBEM-fwd.mat, the BEM surfaces are: pial, cerebellum, inner_skull, outer_skull, and skin.
	These bmeshes were generated using simNIBS headreco and mri2mesh pipelines, and MNE FLASH and watershed functions. Significant post-processing was done to correct for triangulation defects and intersections between surfaces. For details of the meshing pipeline, refer to the mesh_bem_meshing.m script under forward_modeling repository in Purdon lab.

[dig] = a double array containing coordinates of electrodes after projecting to the skin surface

[G] = lead field matrix with fixed orientation. Dimension is nelectrode x nsources = 128 x 20484

[xyzG] = lead field matrix with free orientation. Dimension is nelectrode x nsources*3 = 128 x 61452  

[forward_model] = a structure that consolidates the other variables, including only fixed orientation LFM. It can be used with functional call to plot_loading()


 --- 3shell_hbfBEM-fwd.fif
 --- 4shell_hbfBEM-fwd.fif

These two fif files were MNE-python compatible forward model files. They can be used with the mne.read_forward_solution() function call to read into python as a MNE fwd object. Note that by design MNE-python only saves free-orientation lead field matrix. If fixed orientation is desired, load into python and run mne.convert_forward_solution() function call. Note that these were created to facilitate MNE inverse solution. These fif files were created by loading the native MNE forward model solution computed using MNE BEM solver and replacing the fwd['sol']['data'] narray to be the lead field matrix computed using HBF solver in MATLAB.


 --- hbf2MNE_hbfBEM-fwd.mat

This MATLAB file contains the same variables as in 3shell_hbfBEM-fwd.mat and 4shell_hbfBEM-fwd.mat except the forward_model structure. The forward solution saved as G is computed using MNE based on the BEM surfaces used for the HBF solver. The purpose of this solution is to provide a reference benchmark to check the HBF solver against MNE BEM solver without using different BEM surfaces. To ensure BEM surface resolution is kept the same, ico=None was used in mne.make_bem_model() function call in MNE


 --- hbf2MNE_MNEBEM-fwd.mat

This MATLAB file contains the same variables as in 3shell_hbfBEM-fwd.mat and 4shell_hbfBEM-fwd.mat except the forward_model structure. The forward solution saved as G is computed using MNE based on the MNE native BEM surfaces. These are different surfaces from those used in the other forward solutions in this data set. Outer_skin.surf was extracted using the watershed algorithm. Outer_skull and inner_skull were extracted using FLASH algorithm in MNE. Customized local dilation was applied to the inner_skull surface at occipital regions to prevent exclusion of source points that get outside of the inner_skull surface using the MNE_editbem.m and MNE_correctBEM.py functions. The purpose of this solution is to provide a comparison of the impact of BEM surface resolution and meshing on the results of lead field matrix. Therefore, a typical ico4 resolution was used for the BEM surfaces in MNE when calling mne.make_bem_model(), resulting in 2562 vertices for each of the three boundary surfaces. Note that 3 source points were excluded in hbf2MNE_MNEBEM-fwd because these source points were outside the MNE inner_skull surface, resulting in reduced dimension and misaligned source indices. For instance, source number 20000 in hbf2MNE_MNEBEM is not the same as source number 20000 in hbf2MNE_hbfBEM. 


 --- hbf2MNE_hbfBEM-fwd.fif
 --- hbf2MNE_MNEBEM-fwd.fif

These are the native MNE fwd solution objects created when calling mne.make_forward_solution() in MNE. They are at free orientation due to default MNE save setting. If fixed orientation is desired, load into python and run mne.convert_forward_solution() function call. Note that 3 source points were excluded in hbf2MNE_MNEBEM-fwd because these source points were outside the MNE inner_skull surface, resulting in reduced dimension and misaligned source indices. For instance, source number 20000 in hbf2MNE_MNEBEM is not the same as source number 20000 in hbf2MNE_hbfBEM. 


 --- example_4shell_forward_model.mat

Similar to the 4shell_hbfBEM-fwd.mat, except with referencing matrices and other information consolidated into a single forward_model struct, it is intended to be used with the referencing modeling and simulation pipelines Alex and Gladia developed in MATLAB. Unless you are using these pipelines, this file is not that different from the other .mat files. 


 --- atlas_info.mat

Contains atlas labelling from FREESURFER for sources to Desikan atlas based 68 ROIs, generated using Feng's get_vert_atlas_lobe_info() python function. For details, look for get_atlas_info.txt bash script in forward_modeling repository in Purdon lab.


 --- duke_128_refmatrix.mat

Some standard referencing matrices generated to facilitate re-referencing after projecting source activities to the scalp as Phi. 7 different referencing schemes are provided. 


 --- raw_files 

This folder contains raw files used in meshing and MNE forward modeling. Archived here for reference purpose only. 






## Contributing
Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

Please make sure to update tests as appropriate.

## License
[MIT](https://choosealicense.com/licenses/mit/)